// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: crypto/v1/requests.proto

package crypto_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _requests_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetSupportedChainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupportedChainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedChainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupportedChainsRequestMultiError, or nil if none found.
func (m *GetSupportedChainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedChainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ChainId != nil {

		if m.GetChainId() != "" {

			if _, ok := _GetSupportedChainsRequest_ChainId_InLookup[m.GetChainId()]; !ok {
				err := GetSupportedChainsRequestValidationError{
					field:  "ChainId",
					reason: "value must be in list [evm solana btc]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Limit != nil {

		if m.GetLimit() != 0 {

			if val := m.GetLimit(); val < 1 || val > 100 {
				err := GetSupportedChainsRequestValidationError{
					field:  "Limit",
					reason: "value must be inside range [1, 100]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if len(errors) > 0 {
		return GetSupportedChainsRequestMultiError(errors)
	}

	return nil
}

// GetSupportedChainsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSupportedChainsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSupportedChainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedChainsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedChainsRequestMultiError) AllErrors() []error { return m }

// GetSupportedChainsRequestValidationError is the validation error returned by
// GetSupportedChainsRequest.Validate if the designated constraints aren't met.
type GetSupportedChainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedChainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedChainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedChainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedChainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedChainsRequestValidationError) ErrorName() string {
	return "GetSupportedChainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedChainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedChainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedChainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedChainsRequestValidationError{}

var _GetSupportedChainsRequest_ChainId_InLookup = map[string]struct{}{
	"evm":    {},
	"solana": {},
	"btc":    {},
}

// Validate checks the field values on GetSupportedTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupportedTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupportedTokensRequestMultiError, or nil if none found.
func (m *GetSupportedTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ChainId != nil {

		if m.GetChainId() != "" {

			if err := m._validateUuid(m.GetChainId()); err != nil {
				err = GetSupportedTokensRequestValidationError{
					field:  "ChainId",
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Limit != nil {

		if m.GetLimit() != 0 {

			if val := m.GetLimit(); val < 1 || val > 100 {
				err := GetSupportedTokensRequestValidationError{
					field:  "Limit",
					reason: "value must be inside range [1, 100]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if len(errors) > 0 {
		return GetSupportedTokensRequestMultiError(errors)
	}

	return nil
}

func (m *GetSupportedTokensRequest) _validateUuid(uuid string) error {
	if matched := _requests_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetSupportedTokensRequestMultiError is an error wrapping multiple validation
// errors returned by GetSupportedTokensRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSupportedTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedTokensRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedTokensRequestMultiError) AllErrors() []error { return m }

// GetSupportedTokensRequestValidationError is the validation error returned by
// GetSupportedTokensRequest.Validate if the designated constraints aren't met.
type GetSupportedTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedTokensRequestValidationError) ErrorName() string {
	return "GetSupportedTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedTokensRequestValidationError{}
