// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/requests.proto

package order_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _requests_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetSupportedPairsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupportedPairsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedPairsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupportedPairsRequestMultiError, or nil if none found.
func (m *GetSupportedPairsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedPairsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Limit != nil {

		if m.GetLimit() != 0 {

			if val := m.GetLimit(); val < 1 || val > 100 {
				err := GetSupportedPairsRequestValidationError{
					field:  "Limit",
					reason: "value must be inside range [1, 100]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if len(errors) > 0 {
		return GetSupportedPairsRequestMultiError(errors)
	}

	return nil
}

// GetSupportedPairsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSupportedPairsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSupportedPairsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedPairsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedPairsRequestMultiError) AllErrors() []error { return m }

// GetSupportedPairsRequestValidationError is the validation error returned by
// GetSupportedPairsRequest.Validate if the designated constraints aren't met.
type GetSupportedPairsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedPairsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedPairsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedPairsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedPairsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedPairsRequestValidationError) ErrorName() string {
	return "GetSupportedPairsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedPairsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedPairsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedPairsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedPairsRequestValidationError{}

// Validate checks the field values on GetOrderPairRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderPairRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderPairRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderPairRequestMultiError, or nil if none found.
func (m *GetOrderPairRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderPairRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPair()) < 3 {
		err := GetOrderPairRequestValidationError{
			field:  "Pair",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetOrderPairRequest_Pair_Pattern.MatchString(m.GetPair()) {
		err := GetOrderPairRequestValidationError{
			field:  "Pair",
			reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderPairRequestMultiError(errors)
	}

	return nil
}

// GetOrderPairRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderPairRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderPairRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderPairRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderPairRequestMultiError) AllErrors() []error { return m }

// GetOrderPairRequestValidationError is the validation error returned by
// GetOrderPairRequest.Validate if the designated constraints aren't met.
type GetOrderPairRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderPairRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderPairRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderPairRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderPairRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderPairRequestValidationError) ErrorName() string {
	return "GetOrderPairRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderPairRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderPairRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderPairRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderPairRequestValidationError{}

var _GetOrderPairRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")

// Validate checks the field values on GetOrderPairChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderPairChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderPairChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderPairChartRequestMultiError, or nil if none found.
func (m *GetOrderPairChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderPairChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPair()) < 3 {
		err := GetOrderPairChartRequestValidationError{
			field:  "Pair",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetOrderPairChartRequest_Pair_Pattern.MatchString(m.GetPair()) {
		err := GetOrderPairChartRequestValidationError{
			field:  "Pair",
			reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderPairChartRequestMultiError(errors)
	}

	return nil
}

// GetOrderPairChartRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderPairChartRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderPairChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderPairChartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderPairChartRequestMultiError) AllErrors() []error { return m }

// GetOrderPairChartRequestValidationError is the validation error returned by
// GetOrderPairChartRequest.Validate if the designated constraints aren't met.
type GetOrderPairChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderPairChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderPairChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderPairChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderPairChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderPairChartRequestValidationError) ErrorName() string {
	return "GetOrderPairChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderPairChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderPairChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderPairChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderPairChartRequestValidationError{}

var _GetOrderPairChartRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")

// Validate checks the field values on GetOrderHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderHistoryRequestMultiError, or nil if none found.
func (m *GetOrderHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Pair != nil {

		if m.GetPair() != "" {

			if utf8.RuneCountInString(m.GetPair()) < 3 {
				err := GetOrderHistoryRequestValidationError{
					field:  "Pair",
					reason: "value length must be at least 3 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_GetOrderHistoryRequest_Pair_Pattern.MatchString(m.GetPair()) {
				err := GetOrderHistoryRequestValidationError{
					field:  "Pair",
					reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Limit != nil {

		if m.GetLimit() != 0 {

			if val := m.GetLimit(); val < 1 || val > 100 {
				err := GetOrderHistoryRequestValidationError{
					field:  "Limit",
					reason: "value must be inside range [1, 100]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if len(errors) > 0 {
		return GetOrderHistoryRequestMultiError(errors)
	}

	return nil
}

// GetOrderHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderHistoryRequestMultiError) AllErrors() []error { return m }

// GetOrderHistoryRequestValidationError is the validation error returned by
// GetOrderHistoryRequest.Validate if the designated constraints aren't met.
type GetOrderHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderHistoryRequestValidationError) ErrorName() string {
	return "GetOrderHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderHistoryRequestValidationError{}

var _GetOrderHistoryRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPair()) < 3 {
		err := CreateOrderRequestValidationError{
			field:  "Pair",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOrderRequest_Pair_Pattern.MatchString(m.GetPair()) {
		err := CreateOrderRequestValidationError{
			field:  "Pair",
			reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := OrderType_name[int32(m.GetOrderType())]; !ok {
		err := CreateOrderRequestValidationError{
			field:  "OrderType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := OrderMethod_name[int32(m.GetOrderMethod())]; !ok {
		err := CreateOrderRequestValidationError{
			field:  "OrderMethod",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

var _CreateOrderRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")

// Validate checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelOrderRequestMultiError, or nil if none found.
func (m *CancelOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPair()) < 3 {
		err := CancelOrderRequestValidationError{
			field:  "Pair",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CancelOrderRequest_Pair_Pattern.MatchString(m.GetPair()) {
		err := CancelOrderRequestValidationError{
			field:  "Pair",
			reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOrderId()); err != nil {
		err = CancelOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelOrderRequestMultiError(errors)
	}

	return nil
}

func (m *CancelOrderRequest) _validateUuid(uuid string) error {
	if matched := _requests_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CancelOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderRequestMultiError) AllErrors() []error { return m }

// CancelOrderRequestValidationError is the validation error returned by
// CancelOrderRequest.Validate if the designated constraints aren't met.
type CancelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRequestValidationError) ErrorName() string {
	return "CancelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRequestValidationError{}

var _CancelOrderRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")

// Validate checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderRequestMultiError, or nil if none found.
func (m *UpdateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPair()) < 3 {
		err := UpdateOrderRequestValidationError{
			field:  "Pair",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOrderRequest_Pair_Pattern.MatchString(m.GetPair()) {
		err := UpdateOrderRequestValidationError{
			field:  "Pair",
			reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOrderId()); err != nil {
		err = UpdateOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.UpdateField.(type) {
	case *UpdateOrderRequest_NewPrice:
		if v == nil {
			err := UpdateOrderRequestValidationError{
				field:  "UpdateField",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetNewPrice() < 0 {
			err := UpdateOrderRequestValidationError{
				field:  "NewPrice",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *UpdateOrderRequest_NewQuantity:
		if v == nil {
			err := UpdateOrderRequestValidationError{
				field:  "UpdateField",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetNewQuantity() < 0 {
			err := UpdateOrderRequestValidationError{
				field:  "NewQuantity",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateOrderRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateOrderRequest) _validateUuid(uuid string) error {
	if matched := _requests_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderRequestMultiError) AllErrors() []error { return m }

// UpdateOrderRequestValidationError is the validation error returned by
// UpdateOrderRequest.Validate if the designated constraints aren't met.
type UpdateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderRequestValidationError) ErrorName() string {
	return "UpdateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderRequestValidationError{}

var _UpdateOrderRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")

// Validate checks the field values on StreamOrderUpdatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamOrderUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamOrderUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamOrderUpdatesRequestMultiError, or nil if none found.
func (m *StreamOrderUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamOrderUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamOrderUpdatesRequestMultiError(errors)
	}

	return nil
}

// StreamOrderUpdatesRequestMultiError is an error wrapping multiple validation
// errors returned by StreamOrderUpdatesRequest.ValidateAll() if the
// designated constraints aren't met.
type StreamOrderUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamOrderUpdatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamOrderUpdatesRequestMultiError) AllErrors() []error { return m }

// StreamOrderUpdatesRequestValidationError is the validation error returned by
// StreamOrderUpdatesRequest.Validate if the designated constraints aren't met.
type StreamOrderUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamOrderUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamOrderUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamOrderUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamOrderUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamOrderUpdatesRequestValidationError) ErrorName() string {
	return "StreamOrderUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamOrderUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamOrderUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamOrderUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamOrderUpdatesRequestValidationError{}

// Validate checks the field values on StreamOrderBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamOrderBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamOrderBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamOrderBookRequestMultiError, or nil if none found.
func (m *StreamOrderBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamOrderBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPair()) < 3 {
		err := StreamOrderBookRequestValidationError{
			field:  "Pair",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StreamOrderBookRequest_Pair_Pattern.MatchString(m.GetPair()) {
		err := StreamOrderBookRequestValidationError{
			field:  "Pair",
			reason: "value does not match regex pattern \"^[A-Z0-9\\\\-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDepth() != 0 {

		if val := m.GetDepth(); val < 1 || val > 10 {
			err := StreamOrderBookRequestValidationError{
				field:  "Depth",
				reason: "value must be inside range [1, 10]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return StreamOrderBookRequestMultiError(errors)
	}

	return nil
}

// StreamOrderBookRequestMultiError is an error wrapping multiple validation
// errors returned by StreamOrderBookRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamOrderBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamOrderBookRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamOrderBookRequestMultiError) AllErrors() []error { return m }

// StreamOrderBookRequestValidationError is the validation error returned by
// StreamOrderBookRequest.Validate if the designated constraints aren't met.
type StreamOrderBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamOrderBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamOrderBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamOrderBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamOrderBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamOrderBookRequestValidationError) ErrorName() string {
	return "StreamOrderBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamOrderBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamOrderBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamOrderBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamOrderBookRequestValidationError{}

var _StreamOrderBookRequest_Pair_Pattern = regexp.MustCompile("^[A-Z0-9\\-]+$")
