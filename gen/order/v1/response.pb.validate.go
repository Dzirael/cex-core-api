// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/response.proto

package order_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSupportedPairsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupportedPairsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedPairsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupportedPairsResponseMultiError, or nil if none found.
func (m *GetSupportedPairsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedPairsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSupportedPairsResponseValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSupportedPairsResponseValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSupportedPairsResponseValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSupportedPairsResponseMultiError(errors)
	}

	return nil
}

// GetSupportedPairsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSupportedPairsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetSupportedPairsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedPairsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedPairsResponseMultiError) AllErrors() []error { return m }

// GetSupportedPairsResponseValidationError is the validation error returned by
// GetSupportedPairsResponse.Validate if the designated constraints aren't met.
type GetSupportedPairsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedPairsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedPairsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedPairsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedPairsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedPairsResponseValidationError) ErrorName() string {
	return "GetSupportedPairsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedPairsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedPairsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedPairsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedPairsResponseValidationError{}

// Validate checks the field values on MarketPair with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MarketPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarketPair with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MarketPairMultiError, or
// nil if none found.
func (m *MarketPair) ValidateAll() error {
	return m.validate(true)
}

func (m *MarketPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pair

	// no validation rules for MarketId

	// no validation rules for TokenAId

	// no validation rules for TokenBId

	// no validation rules for Type

	// no validation rules for IsActive

	// no validation rules for MinOrderAmount

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarketPairValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarketPairValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarketPairValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarketPairMultiError(errors)
	}

	return nil
}

// MarketPairMultiError is an error wrapping multiple validation errors
// returned by MarketPair.ValidateAll() if the designated constraints aren't met.
type MarketPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarketPairMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarketPairMultiError) AllErrors() []error { return m }

// MarketPairValidationError is the validation error returned by
// MarketPair.Validate if the designated constraints aren't met.
type MarketPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarketPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarketPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarketPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarketPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarketPairValidationError) ErrorName() string { return "MarketPairValidationError" }

// Error satisfies the builtin error interface
func (e MarketPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarketPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarketPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarketPairValidationError{}

// Validate checks the field values on GetOrderPairResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderPairResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderPairResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderPairResponseMultiError, or nil if none found.
func (m *GetOrderPairResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderPairResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPair()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderPairResponseValidationError{
					field:  "Pair",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderPairResponseValidationError{
					field:  "Pair",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPair()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderPairResponseValidationError{
				field:  "Pair",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	// no validation rules for Volume

	if len(errors) > 0 {
		return GetOrderPairResponseMultiError(errors)
	}

	return nil
}

// GetOrderPairResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderPairResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderPairResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderPairResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderPairResponseMultiError) AllErrors() []error { return m }

// GetOrderPairResponseValidationError is the validation error returned by
// GetOrderPairResponse.Validate if the designated constraints aren't met.
type GetOrderPairResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderPairResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderPairResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderPairResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderPairResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderPairResponseValidationError) ErrorName() string {
	return "GetOrderPairResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderPairResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderPairResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderPairResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderPairResponseValidationError{}

// Validate checks the field values on GetOrderPairChartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderPairChartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderPairChartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderPairChartResponseMultiError, or nil if none found.
func (m *GetOrderPairChartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderPairChartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChartUrl

	if len(errors) > 0 {
		return GetOrderPairChartResponseMultiError(errors)
	}

	return nil
}

// GetOrderPairChartResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderPairChartResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOrderPairChartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderPairChartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderPairChartResponseMultiError) AllErrors() []error { return m }

// GetOrderPairChartResponseValidationError is the validation error returned by
// GetOrderPairChartResponse.Validate if the designated constraints aren't met.
type GetOrderPairChartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderPairChartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderPairChartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderPairChartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderPairChartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderPairChartResponseValidationError) ErrorName() string {
	return "GetOrderPairChartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderPairChartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderPairChartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderPairChartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderPairChartResponseValidationError{}

// Validate checks the field values on GetOrderHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderHistoryResponseMultiError, or nil if none found.
func (m *GetOrderHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrderHistoryResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrderHistoryResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderHistoryResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrderHistoryResponseMultiError(errors)
	}

	return nil
}

// GetOrderHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderHistoryResponseMultiError) AllErrors() []error { return m }

// GetOrderHistoryResponseValidationError is the validation error returned by
// GetOrderHistoryResponse.Validate if the designated constraints aren't met.
type GetOrderHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderHistoryResponseValidationError) ErrorName() string {
	return "GetOrderHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderHistoryResponseValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for MarketId

	// no validation rules for AccountId

	// no validation rules for OrderType

	// no validation rules for OrderMethod

	// no validation rules for Price

	// no validation rules for Amount

	// no validation rules for AmountFilled

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "FilledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "FilledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "FilledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on CancelOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelOrderResponseMultiError, or nil if none found.
func (m *CancelOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CancelOrderResponseMultiError(errors)
	}

	return nil
}

// CancelOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CancelOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderResponseMultiError) AllErrors() []error { return m }

// CancelOrderResponseValidationError is the validation error returned by
// CancelOrderResponse.Validate if the designated constraints aren't met.
type CancelOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderResponseValidationError) ErrorName() string {
	return "CancelOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderResponseValidationError{}

// Validate checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderResponseMultiError, or nil if none found.
func (m *UpdateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if all {
		switch v := interface{}(m.GetUpdatedOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderResponseValidationError{
					field:  "UpdatedOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderResponseValidationError{
					field:  "UpdatedOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderResponseValidationError{
				field:  "UpdatedOrder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrderResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderResponseMultiError) AllErrors() []error { return m }

// UpdateOrderResponseValidationError is the validation error returned by
// UpdateOrderResponse.Validate if the designated constraints aren't met.
type UpdateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderResponseValidationError) ErrorName() string {
	return "UpdateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderResponseValidationError{}

// Validate checks the field values on StreamOrderUpdatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamOrderUpdatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamOrderUpdatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamOrderUpdatesResponseMultiError, or nil if none found.
func (m *StreamOrderUpdatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamOrderUpdatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Type

	// no validation rules for AmountChange

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamOrderUpdatesResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamOrderUpdatesResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamOrderUpdatesResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamOrderUpdatesResponseMultiError(errors)
	}

	return nil
}

// StreamOrderUpdatesResponseMultiError is an error wrapping multiple
// validation errors returned by StreamOrderUpdatesResponse.ValidateAll() if
// the designated constraints aren't met.
type StreamOrderUpdatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamOrderUpdatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamOrderUpdatesResponseMultiError) AllErrors() []error { return m }

// StreamOrderUpdatesResponseValidationError is the validation error returned
// by StreamOrderUpdatesResponse.Validate if the designated constraints aren't met.
type StreamOrderUpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamOrderUpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamOrderUpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamOrderUpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamOrderUpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamOrderUpdatesResponseValidationError) ErrorName() string {
	return "StreamOrderUpdatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamOrderUpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamOrderUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamOrderUpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamOrderUpdatesResponseValidationError{}

// Validate checks the field values on StreamOrderBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamOrderBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamOrderBookResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamOrderBookResponseMultiError, or nil if none found.
func (m *StreamOrderBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamOrderBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pair

	for idx, item := range m.GetAsks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamOrderBookResponseValidationError{
						field:  fmt.Sprintf("Asks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamOrderBookResponseValidationError{
						field:  fmt.Sprintf("Asks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamOrderBookResponseValidationError{
					field:  fmt.Sprintf("Asks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBids() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamOrderBookResponseValidationError{
						field:  fmt.Sprintf("Bids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamOrderBookResponseValidationError{
						field:  fmt.Sprintf("Bids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamOrderBookResponseValidationError{
					field:  fmt.Sprintf("Bids[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamOrderBookResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamOrderBookResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamOrderBookResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamOrderBookResponseMultiError(errors)
	}

	return nil
}

// StreamOrderBookResponseMultiError is an error wrapping multiple validation
// errors returned by StreamOrderBookResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamOrderBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamOrderBookResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamOrderBookResponseMultiError) AllErrors() []error { return m }

// StreamOrderBookResponseValidationError is the validation error returned by
// StreamOrderBookResponse.Validate if the designated constraints aren't met.
type StreamOrderBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamOrderBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamOrderBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamOrderBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamOrderBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamOrderBookResponseValidationError) ErrorName() string {
	return "StreamOrderBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamOrderBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamOrderBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamOrderBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamOrderBookResponseValidationError{}

// Validate checks the field values on OrderBookEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderBookEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderBookEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderBookEntryMultiError,
// or nil if none found.
func (m *OrderBookEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderBookEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Price

	// no validation rules for Quantity

	if len(errors) > 0 {
		return OrderBookEntryMultiError(errors)
	}

	return nil
}

// OrderBookEntryMultiError is an error wrapping multiple validation errors
// returned by OrderBookEntry.ValidateAll() if the designated constraints
// aren't met.
type OrderBookEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderBookEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderBookEntryMultiError) AllErrors() []error { return m }

// OrderBookEntryValidationError is the validation error returned by
// OrderBookEntry.Validate if the designated constraints aren't met.
type OrderBookEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderBookEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderBookEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderBookEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderBookEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderBookEntryValidationError) ErrorName() string { return "OrderBookEntryValidationError" }

// Error satisfies the builtin error interface
func (e OrderBookEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderBookEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderBookEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderBookEntryValidationError{}
