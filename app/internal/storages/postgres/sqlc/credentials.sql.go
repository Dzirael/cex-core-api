// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: credentials.sql

package sqlc

import (
	"context"

	"cex-core-api/app/internal/models/credentials"
	"github.com/google/uuid"
)

const createCredential = `-- name: CreateCredential :exec
INSERT INTO credentials (
    credential_id,
    user_id,
    type,
    is_primary,
    is_verified,
    identifier,
    secret_data
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateCredentialParams struct {
	CredentialID uuid.UUID        `db:"credential_id"`
	UserID       uuid.UUID        `db:"user_id"`
	Type         credentials.Type `db:"type"`
	IsPrimary    bool             `db:"is_primary"`
	IsVerified   bool             `db:"is_verified"`
	Identifier   *string          `db:"identifier"`
	SecretData   []byte           `db:"secret_data"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) error {
	_, err := q.db.Exec(ctx, createCredential,
		arg.CredentialID,
		arg.UserID,
		arg.Type,
		arg.IsPrimary,
		arg.IsVerified,
		arg.Identifier,
		arg.SecretData,
	)
	return err
}

const deleteCredential = `-- name: DeleteCredential :exec
DELETE FROM credentials
WHERE credential_id = $1
`

func (q *Queries) DeleteCredential(ctx context.Context, credentialID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCredential, credentialID)
	return err
}

const getCredentialByID = `-- name: GetCredentialByID :one
SELECT credential_id, user_id, type, is_primary, is_verified, identifier, secret_data, created_at, updated_at FROM credentials
WHERE credential_id = $1
`

func (q *Queries) GetCredentialByID(ctx context.Context, credentialID uuid.UUID) (Credential, error) {
	row := q.db.QueryRow(ctx, getCredentialByID, credentialID)
	var i Credential
	err := row.Scan(
		&i.CredentialID,
		&i.UserID,
		&i.Type,
		&i.IsPrimary,
		&i.IsVerified,
		&i.Identifier,
		&i.SecretData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCredentialByType = `-- name: GetUserCredentialByType :one
SELECT credential_id, user_id, type, is_primary, is_verified, identifier, secret_data, created_at, updated_at FROM credentials
WHERE type = $1 AND user_id = $2
`

func (q *Queries) GetUserCredentialByType(ctx context.Context, type_ credentials.Type, userID uuid.UUID) (Credential, error) {
	row := q.db.QueryRow(ctx, getUserCredentialByType, type_, userID)
	var i Credential
	err := row.Scan(
		&i.CredentialID,
		&i.UserID,
		&i.Type,
		&i.IsPrimary,
		&i.IsVerified,
		&i.Identifier,
		&i.SecretData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :many
SELECT credential_id, user_id, type, is_primary, is_verified, identifier, secret_data, created_at, updated_at FROM credentials
WHERE user_id = $1
ORDER BY is_primary DESC, created_at DESC
`

func (q *Queries) GetUserCredentials(ctx context.Context, userID uuid.UUID) ([]Credential, error) {
	rows, err := q.db.Query(ctx, getUserCredentials, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Credential{}
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.CredentialID,
			&i.UserID,
			&i.Type,
			&i.IsPrimary,
			&i.IsVerified,
			&i.Identifier,
			&i.SecretData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCredentialSecret = `-- name: UpdateCredentialSecret :one
UPDATE credentials
SET secret_data = $1,
    updated_at = NOW()
WHERE type = $2
RETURNING credential_id, user_id, type, is_primary, is_verified, identifier, secret_data, created_at, updated_at
`

func (q *Queries) UpdateCredentialSecret(ctx context.Context, secretData []byte, type_ credentials.Type) (Credential, error) {
	row := q.db.QueryRow(ctx, updateCredentialSecret, secretData, type_)
	var i Credential
	err := row.Scan(
		&i.CredentialID,
		&i.UserID,
		&i.Type,
		&i.IsPrimary,
		&i.IsVerified,
		&i.Identifier,
		&i.SecretData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyCredential = `-- name: VerifyCredential :exec
UPDATE credentials
SET is_verified = true,
    updated_at = NOW()
WHERE credential_id = $1
`

func (q *Queries) VerifyCredential(ctx context.Context, credentialID uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyCredential, credentialID)
	return err
}
