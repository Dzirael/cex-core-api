name: Test & Coverage

on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  test:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      vault:
        image: hashicorp/vault:1.15
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
          VAULT_ADDR: "http://0.0.0.0:8200"
        options: >-
          --cap-add=IPC_LOCK

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Enable Vault engines (totp, transit)
        env:
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: root
        run: |
          curl --header "X-Vault-Token: $VAULT_TOKEN" \
               --request POST \
               --data '{"type":"totp"}' \
               $VAULT_ADDR/v1/sys/mounts/totp

          curl --header "X-Vault-Token: $VAULT_TOKEN" \
               --request POST \
               --data '{"type":"transit"}' \
               $VAULT_ADDR/v1/sys/mounts/transit

          curl --header "X-Vault-Token: $VAULT_TOKEN" \
               --request POST \
               --data '{"type":"aes256-gcm96"}' \
               $VAULT_ADDR/v1/transit/keys/passwords-key

      - uses: mscno/setup-goose@v1
      - run: goose -dir ./migrations postgres "postgres://test:test@localhost:5432/test?sslmode=disable" up

      - name: Run tests with coverage
        env: 
          POSTGRES_DSN: "postgres://test:test@localhost:5432/test?sslmode=disable"
          VAULT_URL: "http://localhost:8200"
        run: |
          go test ./... -coverprofile=coverage.out -covermode=atomic
        
      - name: Generate HTML coverage report
        run: |
          mkdir -p coverage_html
          go tool cover -html=coverage.out -o coverage_html/index.html

      - name: Upload HTML report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage_html
